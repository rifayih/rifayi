clc; clear;

% Euler angles
phi_1=0;
phi=54.73;
phi_2=45;
a = phi_1*pi/180;
b = phi*pi/180;
c = phi_2*pi/180;

% G matrix calculation
G_matrix = [(cos(a)*cos(c))-(sin(a)*sin(c)*cos(b)),(sin(a)*cos(c))+(cos(a)*sin(c)*cos(b)),(sin(c)*sin(b));
            (-cos(a)*sin(c))-(sin(a)*cos(c)*cos(b)),(-sin(a)*sin(c))+(cos(a)*cos(c)*cos(b)),cos(c)*sin(b);
            sin(a)*sin(b),-cos(a)*sin(b),cos(b)];

G_T = G_matrix';

% Strain parameter vectors
r = [0,0.05,0.1,0.15, 0.2,0.25,0.3,0.35, 0.4,0.45,0.5,0.55, 0.6,0.65,0.7,0.75, 0.8,0.85,0.9,0.95,1];
r1 = [100,10,5,2.5,1.667,1.25,1.11,1.01];
r2 = [-99,-9,-4,-1.5,-0.6667,-0.25,-0.111,-0.11,-0.01];

% Bishop Hill sets
A=[1,0,-1,0,0,0,0.5,0.5,-1,-1,0.5,0.5,0.5,0.5,0.5,0.5,0,0,0,0,-0.5,-0.5,-0.5,-0.5,0,0,0,0,-1,0,1,0,0,0,-0.5,-0.5,1,1,-0.5,-0.5,-0.5,-0.5,-0.5,-0.5,0,0,0,0,0.5,0.5,0.5,0.5,0,0,0,0];
B=[-1,1,0,0,0,0,-1,-1,0.5,0.5,0.5,0.5,0,0,0,0,-0.5,-0.5,-0.5,-0.5,0.5,.5,.5,.5,0,0,0,0,1,-1,0,0,0,0,1,1,-0.5,-0.5,-0.5,-0.5,0,0,0,0,0.5,0.5,0.5,0.5,-0.5,-0.5,-0.5,-0.5,0,0,0,0];
C=[0,-1,1,0,0,0,.5,.5,.5,.5,-1,-1,-.5,-.5,-.5,-.5,.5,.5,.5,.5,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,-0.5,-0.5,-0.5,-0.5,1,1,0.5,0.5,0.5,0.5,-0.5,-0.5,-0.5,-0.5,0,0,0,0,0,0,0,0];
F=[0,0,0,1,0,0,0,0,.5,-.5,0,0,.5,-.5,.5,-.5,0,0,0,0,.5,-.5,.5,-.5,.5,.5,-.5,.5,0,0,0,-1,0,0,0,0,-0.5,0.5,0,0,-0.5,0.5,-0.5,0.5,0,0,0,0,-0.5,0.5,-0.5,0.5,-0.5,-0.5,0.5,-0.5];
G=[0,0,0,0,1,0,.5,-.5,0,0,0,0,0,0,0,0,.5,-.5,.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,.5,0,0,0,0,-1,0,-0.5,0.5,0,0,0,0,0,0,0,0,-0.5,0.5,-0.5,0.5,-0.5,-0.5,0.5,0.5,-0.5,0.5,-0.5,-0.5];
H=[0,0,0,0,0,1,0,0,0,0,.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,0,0,0,0,-.5,.5,.5,.5,0,0,0,0,0,-1,0,0,0,0,-0.5,0.5,-0.5,-0.5,0.5,0.5,-0.5,-0.5,0.5,0.5,0,0,0,0,0.5,-0.5,-0.5,-0.5];

% Initialize results
max_M_along_X = zeros(length(r), 1);
max_M_along_Y = zeros(length(r1), 1);
max_M_along_Z = zeros(length(r2), 1);

% --- Process for X direction ---
for i = 1:length(r)
    E_internal = [1, 0, 0;
                  0, -r(i), 0;
                  0, 0, r(i)-1];
    E_external_X = G_matrix * E_internal * G_T;

    M_vals_X = zeros(1, length(A));
    for j = 1:length(A)
        term1 = -B(j) * E_external_X(1,1);
        term2 = A(j) * E_external_X(2,2);
        term3 = H(j) * 2 * E_external_X(1,2);
        term4 = G(j) * 2 * E_external_X(1,3);
        term5 = F(j) * 2 * E_external_X(2,3);
        M_vals_X(j) = (term1 + term2 + term3 + term4 + term5);
    end
    max_M_along_X(i) = max(M_vals_X);
end

% --- Process for Y direction ---
for i = 1:length(r1)
    E_internal = [(-1/r1(i)), 0, 0;
                   0, 1, 0;
                   0, 0, ((1/r1(i))-1)];
    E_external_Y = G_matrix * E_internal * G_T;

    M_vals_Y = zeros(1, length(A));
    for j = 1:length(A)
        term1 = -B(j) * E_external_Y(1,1);
        term2 = A(j) * E_external_Y(2,2);
        term3 = H(j) * 2 * E_external_Y(1,2);
        term4 = G(j) * 2 * E_external_Y(1,3);
        term5 = F(j) * 2 * E_external_Y(2,3);
        M_vals_Y(j) = (term1 + term2 + term3 + term4 + term5);
    end
    max_M_along_Y(i) = max(M_vals_Y);
end

% --- Process for Z direction ---
for i = 1:length(r2)
    r2_i = r2(i);
    if abs(r2_i - 1) < eps
        max_M_along_Z(i) = NaN; % Skip this value
        continue;
    end
    E_internal = [1/(r2_i - 1), 0, 0;
                  0, -r2_i/(r2_i - 1), 0;
                  0, 0, 1];

    E_external_Z = G_matrix * E_internal * G_T;

    M_vals_Z = zeros(1, length(A));
    for j = 1:length(A)
        term1 = -B(j) * E_external_Z(1,1);
        term2 = A(j) * E_external_Z(2,2);
        term3 = H(j) * 2 * E_external_Z(1,2);
        term4 = G(j) * 2 * E_external_Z(1,3);
        term5 = F(j) * 2 * E_external_Z(2,3);
        M_vals_Z(j) = (term1 + term2 + term3 + term4 + term5);
    end
    max_M_along_Z(i) = max(M_vals_Z);
end

% --- Plotting ---
figure; hold on; grid on; axis equal;
plot_limit_x = max([max_M_along_X; max_M_along_Y; abs(max_M_along_Z)], [], 'all', 'omitnan') * 2;
X_plot = linspace(-plot_limit_x, plot_limit_x, 200);

% Plot Eq1: X - rY = M
for i = 1:length(r)
    current_r = r(i);
    M = max_M_along_X(i);
    if abs(current_r) < eps
        plot([M, M], [-plot_limit_x, plot_limit_x], 'r-');
    else
        Y = (1/current_r)*X_plot - (M/current_r);
        Y1 = (1/current_r)*X_plot + (M/current_r);
        plot(X_plot, Y, 'r-');
        plot(X_plot, Y1, 'r-');
    end
end

% Plot Eq2: -X * r1 + Y = M
for i = 1:length(r1)
    M = max_M_along_Y(i);
    Y = X_plot / r1(i) + M;
    Y1 = X_plot / r1(i) - M;
    plot(X_plot, Y, 'g-');
    plot(X_plot, Y1, 'g-');
end

% Plot Eq3: X/(r2-1) - (r2*Y)/(r2-1) = M
for i = 1:length(r2)
    r2_i = r2(i);
    M = max_M_along_Z(i);
    if isnan(M), continue; end
    if abs(r2_i) < eps
        plot([-M, -M], [-plot_limit_x, plot_limit_x], 'b-');
    else
        Y = (1/r2_i)*X_plot - (M * (r2_i - 1) / r2_i);
        Y1 = (1/r2_i)*X_plot + (M * (r2_i - 1) / r2_i);
        plot(X_plot, Y, 'b-');
         plot(X_plot, Y1, 'b-');
    end
end

xlabel('X'); ylabel('Y');
title('Plot of Lines based on max M');
legend({'Eq1 (X)', 'Eq2 (Y)', 'Eq3 (Z)'});
ylim([-plot_limit_x, plot_limit_x]);
hold off;

% Results
disp('G Matrix:');
disp(G_matrix);
disp('G Transpose:');
disp(G_T);
disp('E_external along X,Y,Z:');
disp(E_external_X);
disp(E_external_Y);
disp(E_external_Z);
disp('                            ');
disp('M vector along X:');
disp(M_vals_X);
disp('                            ');
disp('M vector along Y:');
disp(M_vals_Y);
disp('                            ');
disp('M vector along Z:');
disp(M_vals_Z);
disp('                            ');
disp('Max M Value:');
disp(max_M_along_X);
disp(max_M_along_Y);
disp(max_M_along_Z);

%...............................................................

% --- Find and display overall minimum M and corresponding r/r1/r2 ---
%this is wrong i only need to consider r , because i change phi1 by +45 and
%+90
[min_M_X, idx_X] = min(max_M_along_X);
[min_M_Y, idx_Y] = min(max_M_along_Y);
[min_M_Z, idx_Z] = min(max_M_along_Z);

% Collect all values
min_M_all = [min_M_X, min_M_Y, min_M_Z];
corresponding_r_values = [r(idx_X), r1(idx_Y), r2(idx_Z)];
direction_labels = {'r (X direction)', 'r1 (Y direction)', 'r2 (Z direction)'};

% Find overall minimum
[overall_min_M, idx_min] = min(min_M_all);
corresponding_param = corresponding_r_values(idx_min);
corresponding_label = direction_labels{idx_min};


fprintf('\n--- Overall Minimum M Summary ---\n');
fprintf('Overall minimum M = %.4f\n', overall_min_M);
fprintf('Corresponding strain parameter: %s = %.4f\n', corresponding_label, corresponding_param);

R_value = corresponding_param / (corresponding_param - 1);
fprintf('Computed R = r_min/(r_min-1) = %.4f\n', R_value);
